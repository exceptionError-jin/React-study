hooks 함수

react가 화면을 랜더링하는 시점
react -> 상태가 변경되었을때 -> 가상돔 : 실제돔 -> 상태가 변화된 컴포넌트를 리랜더링

-----------------------------------------------------------------------

class

클래스로 컴포넌트를 만드는건 힘들어서
2019년부터 함수형 컴포넌트가 만들어짐

라이프사이클이라 불리는 상태관리가 있었음(생애주기)
--> hook 함수가 만들어진 후로 라이프사이클을 사용할 필요가 없어짐

 -----------------------------------------------------------------------

1.useState
    -react의 상태관리 함수
    -state의 생성 및 갱신이 가능
    -state의 값이 변화하면 해당 컴포넌트를 리랜더링(해당 컴포넌트 함수를 재실행)

2.useRef
    -ref 객체 내부값은 rerender와 상관없이 유지
    -html(실제돔)의 요소에 접근하기 위해서도 사용
    -그러나, react에서 DOM API의 접근을 사용하는 것을 지양한다.

    useState와 useRef의 차이 : 값이 변했을 때 랜더링이 되나 안되나

3.useMemo(연산)
    -연산된 !!결과!! 를 캐싱하고 저장
    -화면이 다시 리랜더링 되어도 연산 과정을 거치지 않고 해당 값을 재사용
    (실무에서 못씀)

4.UseCallback(선언)
    -!!특정 함수!! 를 캐싱
    -화면이 리랜더링되어도 재선언하지 않고 재사용
    -가독성 + 성능을 위해 콜백함수를 유즈콜백으로 사용하는 경우

    메모이제이션(메모아이제이션, 메모라이제이션)

    캐싱(저장)
    리엑트에서 어떤 함수가 선언되거나 연산하는 과정이 오래걸린다(3초)
    그렇다면 리엑트는 리랜더링 할 때 마다 이 연산을 다시 해야한다.

5.useEffect
    -마운트/언마운트/부수효과(state가 변하고 나서 생기는 사이드 이펙트)
    -의존성배열
    -해당 배열 내부의 state값 혹은 값이 변경되면 해당 이펙트(함수)를 재실행

-----------------------------------------------------------------------
